Serialization in rest assured context is a process of converting a java object into request body(payload)

Restassured also supports deserialization by converting response body back to java project

Advantages:
Easy to parse and extract response [Json/xml] values if they are wrapped as java object , user friendly methods can be created which makes code more readable

Design approach:
java object is created with support of POJO classes
POJO classes are created based on request/response payload

what additional libraries required?
For JSON you need to have either jackson , jackson2 ,gson or johnzon in classpath and for xml you need JAXB

****************************************************************************************************************************************************************
POJO classes:

Serialization:

public class Message {
	private String message;
	
	public String getMessage() {
		return message;
	}
	
	public void setMessage(String message) {
		this.message = message;
	}
}
 
 
 //create java object
 Message m = new Message();
 m.setMessage("Hello");
 
 
 //rest assured
 Message msg = new Message();
 msg.setMessage("My message");
 given().
 body(m).
 when().
 post("/message");
 
 //run time request creation
 
 
 //json
 {
	 "message":"Hello"
 }
****************************************************************************************************************************************************************
Deserialization: we can use the get methods to extract response as same we used set to set Values we can use get methods to get values

add the dependencies:
go to maven - search Jackson Databind

<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.13.2.2</version>
</dependency>


jackson annotations
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>2.9.9</version>
		</dependency>



jackson core
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-core</artifactId>
    <version>2.9.9</version>
</dependency>

gson
<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.8.9</version>
</dependency>


Creating POJO classes from complex json:

Now create a package and create a class GetCourse.java
package pojoDay3;

public class GetCourse {

	private String url;
	private String services;
	private String expertise;
	private Courses Courses;
	private String instructor;
	private String linkedIn;
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	public String getServices() {
		return services;
	}
	public void setServices(String services) {
		this.services = services;
	}
	public String getExpertise() {
		return expertise;
	}
	public void setExpertise(String expertise) {
		this.expertise = expertise;
	}
	public pojoDay3.Courses getCourses() {
		return Courses;
	}
	public void setCourses(pojoDay3.Courses courses) {
		Courses = courses;
	}
	public String getInstructor() {
		return instructor;
	}
	public void setInstructor(String instructor) {
		this.instructor = instructor;
	}
	public String getLinkedIn() {
		return linkedIn;
	}
	public void setLinkedIn(String linkedIn) {
		this.linkedIn = linkedIn;
	}
}

********************************************************************************************************************************
package pojoDay3;

import java.util.List;

public class Courses {
	private List<WebAutomation> webAutomation;
	private List<Api> api;
	private List<Mobile> mobile;

	public List<WebAutomation> getWebAutomation() {
		return webAutomation;
	}

	public void setWebAutomation(List<WebAutomation> webAutomation) {
		this.webAutomation = webAutomation;
	}

	public List<Api> getApi() {
		return api;
	}

	public void setApi(List<Api> api) {
		this.api = api;
	}

	public List<Mobile> getMobile() {
		return mobile;
	}

	public void setMobile(List<Mobile> mobile) {
		this.mobile = mobile;
	}
}


********************************************************************************************************************************

package pojoDay3;

public class WebAutomation {

	private String courseTitle;
	private String price;
	public String getCourseTitle() {
		return courseTitle;
	}
	public void setCourseTitle(String courseTitle) {
		this.courseTitle = courseTitle;
	}
	public String getPrice() {
		return price;
	}
	public void setPrice(String price) {
		this.price = price;
	}
	
}


********************************************************************************************************************************

package pojoDay3;

public class Api {
	private String courseTitle;
	private String price;

	public String getCourseTitle() {
		return courseTitle;
	}

	public void setCourseTitle(String courseTitle) {
		this.courseTitle = courseTitle;
	}

	public String getPrice() {
		return price;
	}

	public void setPrice(String price) {
		this.price = price;
	}
}

********************************************************************************************************************************

package pojoDay3;

public class Mobile {
	private String courseTitle;
	private String price;

	public String getCourseTitle() {
		return courseTitle;
	}

	public void setCourseTitle(String courseTitle) {
		this.courseTitle = courseTitle;
	}

	public String getPrice() {
		return price;
	}

	public void setPrice(String price) {
		this.price = price;
	}
}


********************************************************************************************************************************
Deserialization:

package day3;

import static io.restassured.RestAssured.given;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.restassured.parsing.Parser;
import io.restassured.path.json.JsonPath;
import pojoDay3.GetCourse;

public class OAuth2 {

	public static void main(String[] args) throws InterruptedException {

		System.setProperty("webdriver.chrome.driver", "C:\\Testing\\Drivers\\chromedriver_win32\\chromedriver.exe");
		WebDriver driver = new ChromeDriver();
		// login using the gmail/fb
		driver.get(
				"https://accounts.google.com/signin/v2/challenge/pwd?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&auth_url=https%3A%2F%2Faccounts.google.com%2Fo%2Foauth2%2Fv2%2Fauth&client_id=692183103107-p0m7ent2hk7suguv4vq22hjcfhcr43pj.apps.googleusercontent.com&response_type=code&redirect_uri=https%3A%2F%2Frahulshettyacademy.com%2FgetCourse.php&flowName=GeneralOAuthFlow&cid=1&navigationDirection=forward&TL=AM3QAYYEZdMTjUR83LXlxjUXDoQICMFrjec-DpPFGDgStTyHa6Q5Y3Oc_yAdfAb2");
		driver.findElement(By.cssSelector("input[type='email']")).sendKeys("apple123");
		Thread.sleep(2000);

		driver.findElement(By.cssSelector("input[type='password']")).sendKeys("password");
		driver.findElement(By.cssSelector("input[type='password']")).sendKeys(Keys.ENTER);
		Thread.sleep(2000);

		// get the url and extract the code
		String url = driver.getCurrentUrl();
//		in new google chrome version automatic chrome invocation and getting code from it is blocked should be done manually up to this step
//		String url = "https://rahulshettyacademy.com/getCourse.php?code=4%2F0AX4XfWg922To0mrjFgQ3y9M1qXFlndcRT-FtCndS82QrpIgLnZm0OoPt40Pie4o3GAe3jA&scope=email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+openid&authuser=1&prompt=consent"
		String partialcode = url.split("code=")[1];
		String code = partialcode.split("&scope")[0];
		System.out.println(code);

		// send the code and extract access token
		String accessTokenResponse = given().urlEncodingEnabled(false).queryParam("code", code)
				.queryParam("client_id", "692183103107-p0m7ent2hk7suguv4vq22hjcfhcr43pj.apps.googleusercontent.com")
				.queryParam("client_secret", "erZOWM9g3UtwNRj340YYaK_W")
				.queryParam("redirect_uri", "https://rahulshettyacademy.com/getCourse.php")
				.queryParam("grant_type", "autorization_code").when().log().all()
				.post("https://www.googleapis.com/oauth2/v4/token").asString();

		JsonPath js = new JsonPath(accessTokenResponse);
		String accessToken = js.getString("access_token");

		// send the access token
		String response = given().queryParam("access_token", accessToken).when().log().all()
				.get("https://rahulshettyacademy.com/getCourse.php").asString();

		System.out.println(response);
		
		
		
		//deserialization - use get methods
		GetCourse gc =  given().queryParam("access_token",accessToken).expect().defaultParser(Parser.JSON)
							.when()
							.get("https://rahulshettyacademy.com/getCourse.php").as(GetCourse.class);
																//className.class
		System.out.println(gc.getLinkedIn());
		System.out.println(gc.getInstructor());

	}

}
********************************************************************************************************************************
Solving Compex queries from json with simple POJO methods 



		//deserialization - use get methods
		GetCourse gc =  given().queryParam("access_token",accessToken).expect().defaultParser(Parser.JSON)
							.when()
							.get("https://rahulshettyacademy.com/getCourse.php").as(GetCourse.class);
																//className.class
		System.out.println(gc.getLinkedIn());
		System.out.println(gc.getInstructor());
		
		
		//quereying the nested json
		gc.getCourses().getApi().get(1).getCourseTitle();
		
		//iterating and finding the required match
		List<Api> apiCourses = gc.getCourses().getApi();
		for(int i=0;i<apiCourses.size();i++) {
			if(apiCourses.get(i).getCourseTitle().equalsIgnoreCase("SoapUI Webservices testing")) {
				System.out.println(apiCourses.get(i).getPrice());
			}
		}
		
		
		String[] courseTitles = {"Selenium Webdriver Java","Cypress","Protractor"};
		ArrayList<String> a = new ArrayList<String>();
		//print all course names of WebAutomation
		List<WebAutomation> w = gc.getCourses().getWebAutomation();
		for(int j=0;j<w.size();j++) {
			a.add(w.get(j).getCourseTitle());
			System.out.println(w.get(j).getCourseTitle());
		}
		
		List<String> expectedList = Arrays.asList(courseTitles);
		Assert.assertTrue(a.equals(expectedList));
********************************************************************************************************************************
		
Serialization: we set values using setters and pass it as json body

create pojo classes with get and set methods


package day3;

import java.util.List;

public class AddPlacePojo {

	private LocationPojo location;
	private int accuracy;
	private String name;
	private String phoneNumber;
	private String address;
	private List<String> types;
	private String website;
	private String language;
	public LocationPojo getLocation() {
		return location;
	}
	public void setLocation(LocationPojo location) {
		this.location = location;
	}
	public int getAccuracy() {
		return accuracy;
	}
	public void setAccuracy(int accuracy) {
		this.accuracy = accuracy;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPhoneNumber() {
		return phoneNumber;
	}
	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public List<String> getTypes() {
		return types;
	}
	public void setTypes(List<String> types) {
		this.types = types;
	}
	public String getWebsite() {
		return website;
	}
	public void setWebsite(String website) {
		this.website = website;
	}
	public String getLanguage() {
		return language;
	}
	public void setLanguage(String language) {
		this.language = language;
	}
	
}


package day3;

public class LocationPojo {

	private double lat;
	private double lng;
	public double getLat() {
		return lat;
	}
	public void setLat(double lat) {
		this.lat = lat;
	}
	public double getLng() {
		return lng;
	}
	public void setLng(double lng) {
		this.lng = lng;
	}
	
}


package day3;

import io.restassured.RestAssured;
import io.restassured.response.Response;

import static io.restassured.RestAssured.*;

import java.util.ArrayList;
import java.util.List;
public class SerializeTest {
	
	public static void main(String[] args) {
		RestAssured.baseURI = "https://rahulshettyacademy.com";
		
		
		AddPlacePojo p = new AddPlacePojo();
		p.setAccuracy(50);
		p.setAddress("29,side layout , cohen 09");
		p.setLanguage("Frnch-IN");
		p.setPhoneNumber("(+91) 1234578921");
		p.setWebsite("https://rahulshettyacademy.com");
		p.setName("Frontline house");
		List<String> myList = new ArrayList<String>();
		myList.add("shoe park");
		myList.add("shop");
		p.setTypes(myList);
		
		LocationPojo l = new LocationPojo();
		l.setLat(-38.38);
		l.setLng(33.427);
		p.setLocation(l);
		
		
		Response res = given().queryParam("key","qaclick123").body(p)
		.when().post("/maps/api/place/add/json")
		.then().assertThat().statusCode(200).extract().response();
		
		String responseString = res.asString();
		System.out.println(responseString);
	}

}
